"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const AWS = require("aws-sdk");
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const AWSMock = require("aws-sdk-mock");
const saveData_1 = require("../../handler/saveData");
const ddbMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
AWS.config.update({ region: 'local' });
const saveCustomerAddress = new saveData_1.SaveCustomerAddress('');
describe('Manage PushMessage for Authenticated User', () => {
    beforeEach(async () => {
        jest.resetModules(); // Most important - it clears the cache
        AWSMock.setSDKInstance(AWS);
        AWSMock.mock('DynamoDB.DocumentClient', 'put', 'success');
        ddbMock.reset();
        const dynamoDBMock = (0, aws_sdk_client_mock_1.mockClient)(lib_dynamodb_1.DynamoDBDocumentClient);
    });
    afterAll(() => {
        AWSMock.restore();
    });
    it('Should return 200 response', async () => {
        const result = await saveCustomerAddress.saveData();
        expect(result).toMatch('success');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZUhhbmRsZXIuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNhdmVIYW5kbGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3REFBK0Q7QUFFL0QsK0JBQThCO0FBQzlCLDZEQUFpRDtBQUNqRCx3Q0FBeUM7QUFDekMscURBQTZEO0FBQzdELE1BQU0sT0FBTyxHQUFHLElBQUEsZ0NBQVUsRUFBQyxxQ0FBc0IsQ0FBQyxDQUFDO0FBQ25ELEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFFdkMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLDhCQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZELFFBQVEsQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7SUFDdkQsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLHVDQUF1QztRQUM1RCxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzFELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLFlBQVksR0FBRyxJQUFBLGdDQUFVLEVBQUMscUNBQXNCLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDWixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxRQUFRLEVBQ2hELENBQUM7UUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gXCJhd3Mtc2RrXCJcbmltcG9ydCB7IG1vY2tDbGllbnQgfSBmcm9tICdhd3Mtc2RrLWNsaWVudC1tb2NrJztcbmltcG9ydCAgKiBhcyBBV1NNb2NrIGZyb20gJ2F3cy1zZGstbW9jayc7XG5pbXBvcnQgeyBTYXZlQ3VzdG9tZXJBZGRyZXNzIH0gZnJvbSAnLi4vLi4vaGFuZGxlci9zYXZlRGF0YSc7XG5jb25zdCBkZGJNb2NrID0gbW9ja0NsaWVudChEeW5hbW9EQkRvY3VtZW50Q2xpZW50KTtcbkFXUy5jb25maWcudXBkYXRlKHsgcmVnaW9uOiAnbG9jYWwnIH0pO1xuXG5jb25zdCBzYXZlQ3VzdG9tZXJBZGRyZXNzID0gbmV3IFNhdmVDdXN0b21lckFkZHJlc3MoJycpXG5kZXNjcmliZSgnTWFuYWdlIFB1c2hNZXNzYWdlIGZvciBBdXRoZW50aWNhdGVkIFVzZXInLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnJlc2V0TW9kdWxlcygpOyAvLyBNb3N0IGltcG9ydGFudCAtIGl0IGNsZWFycyB0aGUgY2FjaGVcbiAgICAgIEFXU01vY2suc2V0U0RLSW5zdGFuY2UoQVdTKTtcbiAgICAgIEFXU01vY2subW9jaygnRHluYW1vREIuRG9jdW1lbnRDbGllbnQnLCAncHV0JywgJ3N1Y2Nlc3MnKTtcbiAgICAgIGRkYk1vY2sucmVzZXQoKTtcbiAgICAgIGNvbnN0IGR5bmFtb0RCTW9jayA9IG1vY2tDbGllbnQoRHluYW1vREJEb2N1bWVudENsaWVudCk7XG4gICAgfSk7XG4gIFxuICAgIGFmdGVyQWxsKCgpID0+IHtcbiAgICAgIEFXU01vY2sucmVzdG9yZSgpO1xuICAgIH0pO1xuaXQoJ1Nob3VsZCByZXR1cm4gMjAwIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhdmVDdXN0b21lckFkZHJlc3Muc2F2ZURhdGEoXG4gICAgKTtcbiAgICBleHBlY3QocmVzdWx0KS50b01hdGNoKCdzdWNjZXNzJyk7XG4gIH0pO1xuIFxufSk7Il19