"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveCustomerAddress = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
const ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
class SaveCustomerAddress {
    constructor(payload) {
        this.payload = payload;
    }
    async saveData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    UserId: { S: bodyParams.userId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            await ddbClient.send(new client_dynamodb_1.PutItemCommand(params));
            return true;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            // Implement your specific error handling logic here
            return false; // Indicate failure
        }
    }
}
exports.SaveCustomerAddress = SaveCustomerAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZUVtcGxveWVlRGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL3NhdmVFbXBsb3llZURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQTBFO0FBRTFFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztBQUMvQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUVsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRWpELE1BQWEsbUJBQW1CO0lBRzlCLFlBQVksT0FBWTtRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVE7UUFDbkIsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLE1BQU0sR0FBd0I7Z0JBQ2xDLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixJQUFJLEVBQUU7b0JBQ0osTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ2hDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFO29CQUM1QyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ2xDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO29CQUNoQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFDcEMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO2lCQUNuQzthQUNGLENBQUM7WUFFRixNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxnQ0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN2RCxvREFBb0Q7WUFDcEQsT0FBTyxLQUFLLENBQUMsQ0FBQyxtQkFBbUI7U0FDbEM7SUFDSCxDQUFDO0NBQ0Y7QUFqQ0Qsa0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIFB1dEl0ZW1Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8IFwiXCI7XG5jb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5SRUdJT047XG5cbmNvbnN0IGRkYkNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbiB9KTtcblxuZXhwb3J0IGNsYXNzIFNhdmVDdXN0b21lckFkZHJlc3Mge1xuICBwdWJsaWMgcGF5bG9hZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHBheWxvYWQ6IGFueSkge1xuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2F2ZURhdGEoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJvZHlQYXJhbXMgPSBKU09OLnBhcnNlKHRoaXMucGF5bG9hZC5ib2R5KTtcblxuICAgICAgY29uc3QgcGFyYW1zOiBQdXRJdGVtQ29tbWFuZElucHV0ID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgSXRlbToge1xuICAgICAgICAgIFVzZXJJZDogeyBTOiBib2R5UGFyYW1zLnVzZXJJZCB9LCAgLy8gU3BlY2lmeWluZyBzdHJpbmcgdHlwZSBmb3IgVXNlcklkXG4gICAgICAgICAgQ3VzdG9tZXJOYW1lOiB7IFM6IGJvZHlQYXJhbXMuY3VzdG9tZXJOYW1lIH0sXG4gICAgICAgICAgQXBwYXJ0bWVudE5vOiB7IFM6IGJvZHlQYXJhbXMuYXBwYXJ0bWVudE5vIH0sXG4gICAgICAgICAgQWRkcmVzczogeyBTOiBib2R5UGFyYW1zLmFkZHJlc3MgfSxcbiAgICAgICAgICBTdWJ1cmI6IHsgUzogYm9keVBhcmFtcy5zdWJ1cmIgfSxcbiAgICAgICAgICBQb3N0Q29kZTogeyBTOiBib2R5UGFyYW1zLnBvc3RDb2RlIH0sXG4gICAgICAgICAgU3RhdGU6IHsgUzogYm9keVBhcmFtcy5zdGF0ZSB9LFxuICAgICAgICAgIENvdW50cnk6IHsgUzogYm9keVBhcmFtcy5jb3VudHJ5IH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBkZGJDbGllbnQuc2VuZChuZXcgUHV0SXRlbUNvbW1hbmQocGFyYW1zKSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhIHRvIER5bmFtb0RCOlwiLCBlcnJvcik7XG4gICAgICAvLyBJbXBsZW1lbnQgeW91ciBzcGVjaWZpYyBlcnJvciBoYW5kbGluZyBsb2dpYyBoZXJlXG4gICAgICByZXR1cm4gZmFsc2U7IC8vIEluZGljYXRlIGZhaWx1cmVcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIFB1dEl0ZW1Db21tYW5kSW5wdXQge1xuICBUYWJsZU5hbWU6IHN0cmluZztcbiAgSXRlbTogeyBba2V5OiBzdHJpbmddOiBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIH07IC8vIEludGVyZmFjZSBmb3IgdHlwZSBzYWZldHlcbn1cblxuaW50ZXJmYWNlIER5bmFtb0RCQXR0cmlidXRlVmFsdWUge1xuICBTOiBzdHJpbmc7IC8vIEV4YW1wbGU6IFN0cmluZyBkYXRhIHR5cGVcbiAgLy8gQWRkIG90aGVyIGRhdGEgdHlwZXMgYXMgbmVlZGVkIChlLmcuLCBOIGZvciBudW1iZXIpXG59XG4iXX0=