"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveCustomerAddress = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
class SaveCustomerAddress {
    constructor(payload) {
        this.ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
        this.payload = payload;
    }
    async saveData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    UserId: { S: bodyParams.userId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            await this.ddbClient.send(new client_dynamodb_1.PutItemCommand(params)); // Use this.ddbClient here
            return true;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            return false;
        }
    }
}
exports.SaveCustomerAddress = SaveCustomerAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kdWxlcy9zYXZlRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBMEU7QUFFMUUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBRWxDLE1BQWEsbUJBQW1CO0lBSTlCLFlBQVksT0FBWTtRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRO1FBQ25CLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakQsTUFBTSxNQUFNLEdBQXdCO2dCQUNsQyxTQUFTLEVBQUUsU0FBUztnQkFDcEIsSUFBSSxFQUFFO29CQUNKLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO29CQUNoQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxZQUFZLEVBQUU7b0JBQzVDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO29CQUNsQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRTtvQkFDaEMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUU7b0JBQ3BDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFO29CQUM5QixPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRTtpQkFDbkM7YUFDRixDQUFDO1lBRUYsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLGdDQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtZQUNqRixPQUFPLElBQUksQ0FBQztTQUNiO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0NBQ0Y7QUFqQ0Qsa0RBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIFB1dEl0ZW1Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8IFwiXCI7XG5jb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5SRUdJT047XG5cbmV4cG9ydCBjbGFzcyBTYXZlQ3VzdG9tZXJBZGRyZXNzIHtcbiAgcHJpdmF0ZSBkZGJDbGllbnQ6IER5bmFtb0RCQ2xpZW50O1xuICBwdWJsaWMgcGF5bG9hZDogYW55O1xuXG4gIGNvbnN0cnVjdG9yKHBheWxvYWQ6IGFueSkge1xuICAgIHRoaXMuZGRiQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2F2ZURhdGEoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJvZHlQYXJhbXMgPSBKU09OLnBhcnNlKHRoaXMucGF5bG9hZC5ib2R5KTtcbiAgICAgIGNvbnN0IHBhcmFtczogUHV0SXRlbUNvbW1hbmRJbnB1dCA9IHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICBVc2VySWQ6IHsgUzogYm9keVBhcmFtcy51c2VySWQgfSxcbiAgICAgICAgICBDdXN0b21lck5hbWU6IHsgUzogYm9keVBhcmFtcy5jdXN0b21lck5hbWUgfSxcbiAgICAgICAgICBBcHBhcnRtZW50Tm86IHsgUzogYm9keVBhcmFtcy5hcHBhcnRtZW50Tm8gfSxcbiAgICAgICAgICBBZGRyZXNzOiB7IFM6IGJvZHlQYXJhbXMuYWRkcmVzcyB9LFxuICAgICAgICAgIFN1YnVyYjogeyBTOiBib2R5UGFyYW1zLnN1YnVyYiB9LFxuICAgICAgICAgIFBvc3RDb2RlOiB7IFM6IGJvZHlQYXJhbXMucG9zdENvZGUgfSxcbiAgICAgICAgICBTdGF0ZTogeyBTOiBib2R5UGFyYW1zLnN0YXRlIH0sXG4gICAgICAgICAgQ291bnRyeTogeyBTOiBib2R5UGFyYW1zLmNvdW50cnkgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IHRoaXMuZGRiQ2xpZW50LnNlbmQobmV3IFB1dEl0ZW1Db21tYW5kKHBhcmFtcykpOyAvLyBVc2UgdGhpcy5kZGJDbGllbnQgaGVyZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgZGF0YSB0byBEeW5hbW9EQjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgUHV0SXRlbUNvbW1hbmRJbnB1dCB7XG4gIFRhYmxlTmFtZTogc3RyaW5nO1xuICBJdGVtOiB7IFtrZXk6IHN0cmluZ106IER5bmFtb0RCQXR0cmlidXRlVmFsdWUgfTtcbn1cblxuaW50ZXJmYWNlIER5bmFtb0RCQXR0cmlidXRlVmFsdWUge1xuICBTOiBzdHJpbmc7XG59XG4iXX0=