"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveCustomerAddress = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
class SaveCustomerAddress {
    constructor(payload) {
        console.log("ðŸš€ ~ SaveCustomerAddress ~ constructor ~ payload:", payload);
        this.ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
        this.payload = payload;
    }
    async saveData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    UserId: { S: bodyParams.userId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            await this.ddbClient.send(new client_dynamodb_1.PutItemCommand(params)); // Use this.ddbClient here
            return true;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            return false;
        }
    }
}
exports.SaveCustomerAddress = SaveCustomerAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kdWxlcy9zYXZlRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBMEU7QUFFMUUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBRWxDLE1BQWEsbUJBQW1CO0lBSTlCLFlBQVksT0FBWTtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLG1EQUFtRCxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3pFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBR00sS0FBSyxDQUFDLFFBQVE7UUFDbkIsSUFBSTtZQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqRCxNQUFNLE1BQU0sR0FBd0I7Z0JBQ2xDLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixJQUFJLEVBQUU7b0JBQ0osTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ2hDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFO29CQUM1QyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ2xDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO29CQUNoQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFDcEMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO2lCQUNuQzthQUNGLENBQUM7WUFFRixNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBQ2pGLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkQsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Q0FDRjtBQW5DRCxrREFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgXCJcIjtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LlJFR0lPTjtcblxuZXhwb3J0IGNsYXNzIFNhdmVDdXN0b21lckFkZHJlc3Mge1xuICBwcml2YXRlIGRkYkNsaWVudDogRHluYW1vREJDbGllbnQ7XG4gIHB1YmxpYyBwYXlsb2FkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCLwn5qAIH4gU2F2ZUN1c3RvbWVyQWRkcmVzcyB+IGNvbnN0cnVjdG9yIH4gcGF5bG9hZDpcIiwgcGF5bG9hZClcbiAgICB0aGlzLmRkYkNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICB9XG5cblxuICBwdWJsaWMgYXN5bmMgc2F2ZURhdGEoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJvZHlQYXJhbXMgPSBKU09OLnBhcnNlKHRoaXMucGF5bG9hZC5ib2R5KTtcbiAgICAgIGNvbnN0IHBhcmFtczogUHV0SXRlbUNvbW1hbmRJbnB1dCA9IHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICBVc2VySWQ6IHsgUzogYm9keVBhcmFtcy51c2VySWQgfSxcbiAgICAgICAgICBDdXN0b21lck5hbWU6IHsgUzogYm9keVBhcmFtcy5jdXN0b21lck5hbWUgfSxcbiAgICAgICAgICBBcHBhcnRtZW50Tm86IHsgUzogYm9keVBhcmFtcy5hcHBhcnRtZW50Tm8gfSxcbiAgICAgICAgICBBZGRyZXNzOiB7IFM6IGJvZHlQYXJhbXMuYWRkcmVzcyB9LFxuICAgICAgICAgIFN1YnVyYjogeyBTOiBib2R5UGFyYW1zLnN1YnVyYiB9LFxuICAgICAgICAgIFBvc3RDb2RlOiB7IFM6IGJvZHlQYXJhbXMucG9zdENvZGUgfSxcbiAgICAgICAgICBTdGF0ZTogeyBTOiBib2R5UGFyYW1zLnN0YXRlIH0sXG4gICAgICAgICAgQ291bnRyeTogeyBTOiBib2R5UGFyYW1zLmNvdW50cnkgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IHRoaXMuZGRiQ2xpZW50LnNlbmQobmV3IFB1dEl0ZW1Db21tYW5kKHBhcmFtcykpOyAvLyBVc2UgdGhpcy5kZGJDbGllbnQgaGVyZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgZGF0YSB0byBEeW5hbW9EQjpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5pbnRlcmZhY2UgUHV0SXRlbUNvbW1hbmRJbnB1dCB7XG4gIFRhYmxlTmFtZTogc3RyaW5nO1xuICBJdGVtOiB7IFtrZXk6IHN0cmluZ106IER5bmFtb0RCQXR0cmlidXRlVmFsdWUgfTtcbn1cblxuaW50ZXJmYWNlIER5bmFtb0RCQXR0cmlidXRlVmFsdWUge1xuICBTOiBzdHJpbmc7XG59XG4iXX0=