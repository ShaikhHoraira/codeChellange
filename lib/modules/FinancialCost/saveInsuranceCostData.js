"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveInsuranceCostData = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
class SaveInsuranceCostData {
    constructor(payload) {
        console.log("ðŸš€ ~ SaveInsuranceCostData ~ constructor ~ payload:", payload);
        this.ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
        this.payload = payload;
    }
    async saveRentData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    InsuranceId: { S: bodyParams.insuranceId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            const result = await this.ddbClient.send(new client_dynamodb_1.PutItemCommand(params)); // Use this.ddbClient here
            return result;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            return false;
        }
    }
}
exports.SaveInsuranceCostData = SaveInsuranceCostData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZUluc3VyYW5jZUNvc3REYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvRmluYW5jaWFsQ29zdC9zYXZlSW5zdXJhbmNlQ29zdERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQTBFO0FBRTFFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztBQUMvQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUVsQyxNQUFhLHFCQUFxQjtJQUloQyxZQUFZLE9BQVk7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxREFBcUQsRUFBRSxPQUFPLENBQUMsQ0FBQTtRQUMzRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUdNLEtBQUssQ0FBQyxZQUFZO1FBQ3ZCLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakQsTUFBTSxNQUFNLEdBQXdCO2dCQUNsQyxTQUFTLEVBQUUsU0FBUztnQkFDcEIsSUFBSSxFQUFFO29CQUNKLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFO29CQUMxQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxZQUFZLEVBQUU7b0JBQzVDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO29CQUNsQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRTtvQkFDaEMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUU7b0JBQ3BDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFO29CQUM5QixPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRTtpQkFDbkM7YUFDRixDQUFDO1lBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLGdDQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQjtZQUNoRyxPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0NBQ0Y7QUFuQ0Qsc0RBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIFB1dEl0ZW1Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8IFwiXCI7XG5jb25zdCByZWdpb24gPSBwcm9jZXNzLmVudi5SRUdJT047XG5cbmV4cG9ydCBjbGFzcyBTYXZlSW5zdXJhbmNlQ29zdERhdGEge1xuICBwcml2YXRlIGRkYkNsaWVudDogRHluYW1vREJDbGllbnQ7XG4gIHB1YmxpYyBwYXlsb2FkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCLwn5qAIH4gU2F2ZUluc3VyYW5jZUNvc3REYXRhIH4gY29uc3RydWN0b3IgfiBwYXlsb2FkOlwiLCBwYXlsb2FkKVxuICAgIHRoaXMuZGRiQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uIH0pO1xuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XG4gIH1cblxuXG4gIHB1YmxpYyBhc3luYyBzYXZlUmVudERhdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYm9keVBhcmFtcyA9IEpTT04ucGFyc2UodGhpcy5wYXlsb2FkLmJvZHkpO1xuICAgICAgY29uc3QgcGFyYW1zOiBQdXRJdGVtQ29tbWFuZElucHV0ID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgSXRlbToge1xuICAgICAgICAgIEluc3VyYW5jZUlkOiB7IFM6IGJvZHlQYXJhbXMuaW5zdXJhbmNlSWQgfSwgIC8vIFNwZWNpZnlpbmcgc3RyaW5nIHR5cGUgZm9yIFVzZXJJZFxuICAgICAgICAgIEN1c3RvbWVyTmFtZTogeyBTOiBib2R5UGFyYW1zLmN1c3RvbWVyTmFtZSB9LFxuICAgICAgICAgIEFwcGFydG1lbnRObzogeyBTOiBib2R5UGFyYW1zLmFwcGFydG1lbnRObyB9LFxuICAgICAgICAgIEFkZHJlc3M6IHsgUzogYm9keVBhcmFtcy5hZGRyZXNzIH0sXG4gICAgICAgICAgU3VidXJiOiB7IFM6IGJvZHlQYXJhbXMuc3VidXJiIH0sXG4gICAgICAgICAgUG9zdENvZGU6IHsgUzogYm9keVBhcmFtcy5wb3N0Q29kZSB9LFxuICAgICAgICAgIFN0YXRlOiB7IFM6IGJvZHlQYXJhbXMuc3RhdGUgfSxcbiAgICAgICAgICBDb3VudHJ5OiB7IFM6IGJvZHlQYXJhbXMuY291bnRyeSB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kZGJDbGllbnQuc2VuZChuZXcgUHV0SXRlbUNvbW1hbmQocGFyYW1zKSk7IC8vIFVzZSB0aGlzLmRkYkNsaWVudCBoZXJlXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgdG8gRHluYW1vREI6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIFB1dEl0ZW1Db21tYW5kSW5wdXQge1xuICBUYWJsZU5hbWU6IHN0cmluZztcbiAgSXRlbTogeyBba2V5OiBzdHJpbmddOiBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIH07XG59XG5cbmludGVyZmFjZSBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIHtcbiAgUzogc3RyaW5nO1xufVxuIl19