"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveMarketingCostData = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
class SaveMarketingCostData {
    constructor(payload) {
        console.log("ðŸš€ ~ SaveMarketingCostData ~ constructor ~ payload:", payload);
        this.ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
        this.payload = payload;
    }
    async saveMarketingData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    MarketingInvoiceId: { S: bodyParams.marketingInvoiceId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            const result = await this.ddbClient.send(new client_dynamodb_1.PutItemCommand(params)); // Use this.ddbClient here
            return result;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            return false;
        }
    }
}
exports.SaveMarketingCostData = SaveMarketingCostData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZU1hcmtldGluZ0Nvc3REYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvTWFya2V0aW5nYW5kU2FsZXNDb3N0L3NhdmVNYXJrZXRpbmdDb3N0RGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBMEU7QUFFMUUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0FBRWxDLE1BQWEscUJBQXFCO0lBSWhDLFlBQVksT0FBWTtRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLHFEQUFxRCxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBR00sS0FBSyxDQUFDLGlCQUFpQjtRQUM1QixJQUFJO1lBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELE1BQU0sTUFBTSxHQUF3QjtnQkFDbEMsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLElBQUksRUFBRTtvQkFDSixrQkFBa0IsRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsa0JBQWtCLEVBQUU7b0JBQ3hELFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFO29CQUM1QyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ2xDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO29CQUNoQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFDcEMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO2lCQUNuQzthQUNGLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBQ2hHLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkQsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Q0FDRjtBQW5DRCxzREFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgXCJcIjtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LlJFR0lPTjtcblxuZXhwb3J0IGNsYXNzIFNhdmVNYXJrZXRpbmdDb3N0RGF0YSB7XG4gIHByaXZhdGUgZGRiQ2xpZW50OiBEeW5hbW9EQkNsaWVudDtcbiAgcHVibGljIHBheWxvYWQ6IGFueTtcblxuICBjb25zdHJ1Y3RvcihwYXlsb2FkOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhcIvCfmoAgfiBTYXZlTWFya2V0aW5nQ29zdERhdGEgfiBjb25zdHJ1Y3RvciB+IHBheWxvYWQ6XCIsIHBheWxvYWQpXG4gICAgdGhpcy5kZGJDbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoeyByZWdpb24gfSk7XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG5cbiAgcHVibGljIGFzeW5jIHNhdmVNYXJrZXRpbmdEYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJvZHlQYXJhbXMgPSBKU09OLnBhcnNlKHRoaXMucGF5bG9hZC5ib2R5KTtcbiAgICAgIGNvbnN0IHBhcmFtczogUHV0SXRlbUNvbW1hbmRJbnB1dCA9IHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IHtcbiAgICAgICAgICBNYXJrZXRpbmdJbnZvaWNlSWQ6IHsgUzogYm9keVBhcmFtcy5tYXJrZXRpbmdJbnZvaWNlSWQgfSwgIC8vIFNwZWNpZnlpbmcgc3RyaW5nIHR5cGUgZm9yIFVzZXJJZFxuICAgICAgICAgIEN1c3RvbWVyTmFtZTogeyBTOiBib2R5UGFyYW1zLmN1c3RvbWVyTmFtZSB9LFxuICAgICAgICAgIEFwcGFydG1lbnRObzogeyBTOiBib2R5UGFyYW1zLmFwcGFydG1lbnRObyB9LFxuICAgICAgICAgIEFkZHJlc3M6IHsgUzogYm9keVBhcmFtcy5hZGRyZXNzIH0sXG4gICAgICAgICAgU3VidXJiOiB7IFM6IGJvZHlQYXJhbXMuc3VidXJiIH0sXG4gICAgICAgICAgUG9zdENvZGU6IHsgUzogYm9keVBhcmFtcy5wb3N0Q29kZSB9LFxuICAgICAgICAgIFN0YXRlOiB7IFM6IGJvZHlQYXJhbXMuc3RhdGUgfSxcbiAgICAgICAgICBDb3VudHJ5OiB7IFM6IGJvZHlQYXJhbXMuY291bnRyeSB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5kZGJDbGllbnQuc2VuZChuZXcgUHV0SXRlbUNvbW1hbmQocGFyYW1zKSk7IC8vIFVzZSB0aGlzLmRkYkNsaWVudCBoZXJlXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgdG8gRHluYW1vREI6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuaW50ZXJmYWNlIFB1dEl0ZW1Db21tYW5kSW5wdXQge1xuICBUYWJsZU5hbWU6IHN0cmluZztcbiAgSXRlbTogeyBba2V5OiBzdHJpbmddOiBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIH07XG59XG5cbmludGVyZmFjZSBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIHtcbiAgUzogc3RyaW5nO1xufVxuIl19