"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveCustomerAddress = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
const ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
class SaveCustomerAddress {
    constructor(payload) {
        this.payload = payload;
    }
    async saveData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    ProductionCostId: { S: bodyParams.productionCostId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            await ddbClient.send(new client_dynamodb_1.PutItemCommand(params));
            return true;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            // Implement your specific error handling logic here
            return false; // Indicate failure
        }
    }
}
exports.SaveCustomerAddress = SaveCustomerAddress;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZVByb2R1Y3Rpb25Db3N0RGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL1BEQy9zYXZlUHJvZHVjdGlvbkNvc3REYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQUEwRTtBQUUxRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDL0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFFbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUVqRCxNQUFhLG1CQUFtQjtJQUc5QixZQUFZLE9BQVk7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRO1FBQ25CLElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFakQsTUFBTSxNQUFNLEdBQXdCO2dCQUNsQyxTQUFTLEVBQUUsU0FBUztnQkFDcEIsSUFBSSxFQUFFO29CQUNKLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDcEQsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxZQUFZLEVBQUU7b0JBQzVDLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFO29CQUM1QyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRTtvQkFDbEMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ2hDLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsUUFBUSxFQUFFO29CQUNwQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFBRTtvQkFDOUIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7aUJBQ25DO2FBQ0YsQ0FBQztZQUVGLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLGdDQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELG9EQUFvRDtZQUNwRCxPQUFPLEtBQUssQ0FBQyxDQUFDLG1CQUFtQjtTQUNsQztJQUNILENBQUM7Q0FDRjtBQWpDRCxrREFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgXCJcIjtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LlJFR0lPTjtcblxuY29uc3QgZGRiQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uIH0pO1xuXG5leHBvcnQgY2xhc3MgU2F2ZUN1c3RvbWVyQWRkcmVzcyB7XG4gIHB1YmxpYyBwYXlsb2FkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzYXZlRGF0YSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYm9keVBhcmFtcyA9IEpTT04ucGFyc2UodGhpcy5wYXlsb2FkLmJvZHkpO1xuXG4gICAgICBjb25zdCBwYXJhbXM6IFB1dEl0ZW1Db21tYW5kSW5wdXQgPSB7XG4gICAgICAgIFRhYmxlTmFtZTogdGFibGVOYW1lLFxuICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgUHJvZHVjdGlvbkNvc3RJZDogeyBTOiBib2R5UGFyYW1zLnByb2R1Y3Rpb25Db3N0SWQgfSwgIC8vIFNwZWNpZnlpbmcgc3RyaW5nIHR5cGUgZm9yIFVzZXJJZFxuICAgICAgICAgIEN1c3RvbWVyTmFtZTogeyBTOiBib2R5UGFyYW1zLmN1c3RvbWVyTmFtZSB9LFxuICAgICAgICAgIEFwcGFydG1lbnRObzogeyBTOiBib2R5UGFyYW1zLmFwcGFydG1lbnRObyB9LFxuICAgICAgICAgIEFkZHJlc3M6IHsgUzogYm9keVBhcmFtcy5hZGRyZXNzIH0sXG4gICAgICAgICAgU3VidXJiOiB7IFM6IGJvZHlQYXJhbXMuc3VidXJiIH0sXG4gICAgICAgICAgUG9zdENvZGU6IHsgUzogYm9keVBhcmFtcy5wb3N0Q29kZSB9LFxuICAgICAgICAgIFN0YXRlOiB7IFM6IGJvZHlQYXJhbXMuc3RhdGUgfSxcbiAgICAgICAgICBDb3VudHJ5OiB7IFM6IGJvZHlQYXJhbXMuY291bnRyeSB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZGRiQ2xpZW50LnNlbmQobmV3IFB1dEl0ZW1Db21tYW5kKHBhcmFtcykpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgZGF0YSB0byBEeW5hbW9EQjpcIiwgZXJyb3IpO1xuICAgICAgLy8gSW1wbGVtZW50IHlvdXIgc3BlY2lmaWMgZXJyb3IgaGFuZGxpbmcgbG9naWMgaGVyZVxuICAgICAgcmV0dXJuIGZhbHNlOyAvLyBJbmRpY2F0ZSBmYWlsdXJlXG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBQdXRJdGVtQ29tbWFuZElucHV0IHtcbiAgVGFibGVOYW1lOiBzdHJpbmc7XG4gIEl0ZW06IHsgW2tleTogc3RyaW5nXTogRHluYW1vREJBdHRyaWJ1dGVWYWx1ZSB9OyAvLyBJbnRlcmZhY2UgZm9yIHR5cGUgc2FmZXR5XG59XG5cbmludGVyZmFjZSBEeW5hbW9EQkF0dHJpYnV0ZVZhbHVlIHtcbiAgUzogc3RyaW5nOyAvLyBFeGFtcGxlOiBTdHJpbmcgZGF0YSB0eXBlXG4gIC8vIEFkZCBvdGhlciBkYXRhIHR5cGVzIGFzIG5lZWRlZCAoZS5nLiwgTiBmb3IgbnVtYmVyKVxufVxuIl19