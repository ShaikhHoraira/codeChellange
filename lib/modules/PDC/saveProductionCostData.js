"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveProductionCostData = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const tableName = process.env.TABLE_NAME || "";
const region = process.env.REGION;
class saveProductionCostData {
    constructor(payload) {
        console.log("ðŸš€ ~ saveProductionCostData ~ constructor ~ payload:", payload);
        this.ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
        this.payload = payload;
    }
    async saveData() {
        try {
            const bodyParams = JSON.parse(this.payload.body);
            const params = {
                TableName: tableName,
                Item: {
                    ProductionCostId: { S: bodyParams.productionCostId },
                    CustomerName: { S: bodyParams.customerName },
                    AppartmentNo: { S: bodyParams.appartmentNo },
                    Address: { S: bodyParams.address },
                    Suburb: { S: bodyParams.suburb },
                    PostCode: { S: bodyParams.postCode },
                    State: { S: bodyParams.state },
                    Country: { S: bodyParams.country },
                },
            };
            const result = await this.ddbClient.send(new client_dynamodb_1.PutItemCommand(params)); // Use this.ddbClient here
            return result;
        }
        catch (error) {
            console.error("Error saving data to DynamoDB:", error);
            return false;
        }
    }
}
exports.saveProductionCostData = saveProductionCostData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZVByb2R1Y3Rpb25Db3N0RGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL1BEQy9zYXZlUHJvZHVjdGlvbkNvc3REYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQUEwRTtBQUUxRSxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7QUFDL0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFFbEMsTUFBYSxzQkFBc0I7SUFJakMsWUFBWSxPQUFZO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0RBQXNELEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDNUUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFHTSxLQUFLLENBQUMsUUFBUTtRQUNuQixJQUFJO1lBQ0YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pELE1BQU0sTUFBTSxHQUF3QjtnQkFDbEMsU0FBUyxFQUFFLFNBQVM7Z0JBQ3BCLElBQUksRUFBRTtvQkFDSixnQkFBZ0IsRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7b0JBQ3BELFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsWUFBWSxFQUFFO29CQUM1QyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFlBQVksRUFBRTtvQkFDNUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ2xDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO29CQUNoQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRTtvQkFDcEMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTyxFQUFFO2lCQUNuQzthQUNGLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCO1lBQ2hHLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkQsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7Q0FDRjtBQW5DRCx3REFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgfHwgXCJcIjtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LlJFR0lPTjtcblxuZXhwb3J0IGNsYXNzIHNhdmVQcm9kdWN0aW9uQ29zdERhdGEge1xuICBwcml2YXRlIGRkYkNsaWVudDogRHluYW1vREJDbGllbnQ7XG4gIHB1YmxpYyBwYXlsb2FkOiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGF5bG9hZDogYW55KSB7XG4gICAgY29uc29sZS5sb2coXCLwn5qAIH4gc2F2ZVByb2R1Y3Rpb25Db3N0RGF0YSB+IGNvbnN0cnVjdG9yIH4gcGF5bG9hZDpcIiwgcGF5bG9hZClcbiAgICB0aGlzLmRkYkNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbiB9KTtcbiAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xuICB9XG5cblxuICBwdWJsaWMgYXN5bmMgc2F2ZURhdGEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYm9keVBhcmFtcyA9IEpTT04ucGFyc2UodGhpcy5wYXlsb2FkLmJvZHkpO1xuICAgICAgY29uc3QgcGFyYW1zOiBQdXRJdGVtQ29tbWFuZElucHV0ID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgSXRlbToge1xuICAgICAgICAgIFByb2R1Y3Rpb25Db3N0SWQ6IHsgUzogYm9keVBhcmFtcy5wcm9kdWN0aW9uQ29zdElkIH0sICAvLyBTcGVjaWZ5aW5nIHN0cmluZyB0eXBlIGZvciBVc2VySWRcbiAgICAgICAgICBDdXN0b21lck5hbWU6IHsgUzogYm9keVBhcmFtcy5jdXN0b21lck5hbWUgfSxcbiAgICAgICAgICBBcHBhcnRtZW50Tm86IHsgUzogYm9keVBhcmFtcy5hcHBhcnRtZW50Tm8gfSxcbiAgICAgICAgICBBZGRyZXNzOiB7IFM6IGJvZHlQYXJhbXMuYWRkcmVzcyB9LFxuICAgICAgICAgIFN1YnVyYjogeyBTOiBib2R5UGFyYW1zLnN1YnVyYiB9LFxuICAgICAgICAgIFBvc3RDb2RlOiB7IFM6IGJvZHlQYXJhbXMucG9zdENvZGUgfSxcbiAgICAgICAgICBTdGF0ZTogeyBTOiBib2R5UGFyYW1zLnN0YXRlIH0sXG4gICAgICAgICAgQ291bnRyeTogeyBTOiBib2R5UGFyYW1zLmNvdW50cnkgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZGRiQ2xpZW50LnNlbmQobmV3IFB1dEl0ZW1Db21tYW5kKHBhcmFtcykpOyAvLyBVc2UgdGhpcy5kZGJDbGllbnQgaGVyZVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhIHRvIER5bmFtb0RCOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmludGVyZmFjZSBQdXRJdGVtQ29tbWFuZElucHV0IHtcbiAgVGFibGVOYW1lOiBzdHJpbmc7XG4gIEl0ZW06IHsgW2tleTogc3RyaW5nXTogRHluYW1vREJBdHRyaWJ1dGVWYWx1ZSB9O1xufVxuXG5pbnRlcmZhY2UgRHluYW1vREJBdHRyaWJ1dGVWYWx1ZSB7XG4gIFM6IHN0cmluZztcbn1cbiJdfQ==