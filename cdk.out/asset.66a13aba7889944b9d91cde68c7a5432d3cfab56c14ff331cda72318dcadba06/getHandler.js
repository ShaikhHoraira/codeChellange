"use strict";
// import * as AWS from 'aws-sdk';
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const tableName = process.env.TODO_TABLE_NAME;
const documentClient = new AWS.DynamoDB.DocumentClient({
    region: process.env.region,
});
const handler = async (event, _context) => {
    console.info(event);
    const suburb = event.suburb;
    const postCode = event.postCode;
    let params = {
        TableName: tableName,
    };
    console.info('line 74');
    if (suburb || postCode) {
        let FilterExpression = '';
        let ExpressionAttributeValues = {};
        console.info('line 78');
        if (suburb) {
            FilterExpression += '#Suburb = :suburb';
            console.info('line 81');
            ExpressionAttributeValues[':suburb'] = suburb;
        }
        console.info('line 844');
        if (postCode) {
            if (FilterExpression) {
                FilterExpression += ' AND ';
                console.info('line 88');
            }
            console.info('line 90');
            FilterExpression += '#PostCode = :postCode';
            ExpressionAttributeValues[':postCode'] = postCode;
        }
        params = {
            ...params,
            FilterExpression,
            ExpressionAttributeNames: {
                '#Suburb': 'Suburb',
                '#PostCode': 'PostCode',
            },
            ExpressionAttributeValues,
        };
        console.info('line 104');
    }
    try {
        const data = await documentClient.scan(params).promise();
        console.info('line 109');
        const items = data.Items;
        const response = {
            statusCode: 200,
            body: JSON.stringify(items),
        };
        console.info(`body: ${response.body}`);
        return response;
    }
    catch (e) {
        console.info(e);
        return {
            statusCode: 500,
            body: 'Internal Server Error',
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldEhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGtDQUFrQzs7O0FBeURsQywrQkFBK0I7QUFFL0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7QUFDOUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO0NBQzNCLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFZLEtBQUssRUFBRSxLQUFVLEVBQUUsUUFBYSxFQUFFLEVBQUU7SUFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzVCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFFaEMsSUFBSSxNQUFNLEdBQTBDO1FBQ2xELFNBQVMsRUFBRSxTQUFVO0tBQ3RCLENBQUM7SUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hCLElBQUksTUFBTSxJQUFJLFFBQVEsRUFBRTtRQUN0QixJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLHlCQUF5QixHQUE0RCxFQUFFLENBQUM7UUFDNUYsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixJQUFJLE1BQU0sRUFBRTtZQUNWLGdCQUFnQixJQUFJLG1CQUFtQixDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEIseUJBQXlCLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6QixJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksZ0JBQWdCLEVBQUU7Z0JBQ3BCLGdCQUFnQixJQUFJLE9BQU8sQ0FBQztnQkFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN6QjtZQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDeEIsZ0JBQWdCLElBQUksdUJBQXVCLENBQUM7WUFDNUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ25EO1FBRUQsTUFBTSxHQUFHO1lBQ1AsR0FBRyxNQUFNO1lBQ1QsZ0JBQWdCO1lBQ2hCLHdCQUF3QixFQUFFO2dCQUN4QixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsV0FBVyxFQUFFLFVBQVU7YUFDeEI7WUFDRCx5QkFBeUI7U0FDMUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUI7SUFFRCxJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QixNQUFNLFFBQVEsR0FBRztZQUNmLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1NBQzVCLENBQUM7UUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkMsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLHVCQUF1QjtTQUM5QixDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7QUEzRFcsUUFBQSxPQUFPLFdBMkRsQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcblxuLy8gY29uc3QgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVE9ET19UQUJMRV9OQU1FO1xuLy8gY29uc3QgZG9jdW1lbnRDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KHtcbi8vICAgcmVnaW9uOiBwcm9jZXNzLmVudi5yZWdpb24sXG4vLyB9KTtcblxuLy8gZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQgOiBhbnksIF9jb250ZXh0OiBhbnkpID0+IHtcbi8vICAgY29uc29sZS5pbmZvKGV2ZW50KTtcblxuLy8gICBjb25zdCBxdWVyeVBhcmFtcyA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycztcbi8vICAgY29uc3Qgc3VidXJiID0gcXVlcnlQYXJhbXMuc3VidXJiO1xuLy8gICBjb25zdCBwb3N0Y29kZSA9IHF1ZXJ5UGFyYW1zLnBvc3Rjb2RlO1xuXG4vLyAgIGNvbnN0IHBhcmFtczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LlNjYW5JbnB1dCA9IHtcbi8vICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSEsXG4vLyAgIH07XG5cbi8vICAgaWYgKHN1YnVyYikge1xuLy8gICAgIHBhcmFtcy5GaWx0ZXJFeHByZXNzaW9uID0gJyNzdWJ1cmIgPSA6c3VidXJiJztcbi8vICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzID0ge1xuLy8gICAgICAgJyNzdWJ1cmInOiAnU3VidXJiJyxcbi8vICAgICB9O1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0ge1xuLy8gICAgICAgJzpzdWJ1cmInOiBzdWJ1cmIsXG4vLyAgICAgfTtcbi8vICAgfVxuXG4vLyAgIGlmIChwb3N0Y29kZSkge1xuLy8gICAgIHBhcmFtcy5GaWx0ZXJFeHByZXNzaW9uID0gJyNwb3N0Q29kZSA9IDpwb3N0Q29kZSc7XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyA9IHtcbi8vICAgICAgICcjcG9zdENvZGUnOiAnUG9zdENvZGUnLFxuLy8gICAgIH07XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMgPSB7XG4vLyAgICAgICAnOnBvc3RDb2RlJzogcG9zdGNvZGUsXG4vLyAgICAgfTtcbi8vICAgfVxuXG4vLyAgIHRyeSB7XG4vLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4vLyAgICAgY29uc3QgaXRlbXMgPSBkYXRhLkl0ZW1zO1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuLy8gICAgICAgc3RhdHVzQ29kZTogMjAwLFxuLy8gICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaXRlbXMpLFxuLy8gICAgIH07XG4vLyAgICAgY29uc29sZS5pbmZvKGBib2R5OiAke3Jlc3BvbnNlLmJvZHl9YCk7XG4vLyAgICAgcmV0dXJuIHJlc3BvbnNlO1xuLy8gICB9IGNhdGNoIChlKSB7XG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbi8vICAgICAgIGJvZHk6IGUgPT09IDUwMCA/ICdJbnZhbGlkIFJlcXVlc3QgUGFyYW1ldGVycycgOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnLFxuLy8gICAgIH07XG4vLyAgIH1cbi8vIH07XG5cblxuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRPRE9fVEFCTEVfTkFNRTtcbmNvbnN0IGRvY3VtZW50Q2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCh7XG4gIHJlZ2lvbjogcHJvY2Vzcy5lbnYucmVnaW9uLFxufSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIF9jb250ZXh0OiBhbnkpID0+IHtcbiAgY29uc29sZS5pbmZvKGV2ZW50KTtcblxuICBjb25zdCBzdWJ1cmIgPSBldmVudC5zdWJ1cmI7XG4gIGNvbnN0IHBvc3RDb2RlID0gZXZlbnQucG9zdENvZGU7XG5cbiAgbGV0IHBhcmFtczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LlNjYW5JbnB1dCA9IHtcbiAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSEsXG4gIH07XG4gIGNvbnNvbGUuaW5mbygnbGluZSA3NCcpO1xuICBpZiAoc3VidXJiIHx8IHBvc3RDb2RlKSB7XG4gICAgbGV0IEZpbHRlckV4cHJlc3Npb24gPSAnJztcbiAgICBsZXQgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZU1hcCA9IHt9O1xuICAgIGNvbnNvbGUuaW5mbygnbGluZSA3OCcpO1xuICAgIGlmIChzdWJ1cmIpIHtcbiAgICAgIEZpbHRlckV4cHJlc3Npb24gKz0gJyNTdWJ1cmIgPSA6c3VidXJiJztcbiAgICAgIGNvbnNvbGUuaW5mbygnbGluZSA4MScpO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOnN1YnVyYiddID0gc3VidXJiO1xuICAgIH1cbiAgICBjb25zb2xlLmluZm8oJ2xpbmUgODQ0Jyk7XG4gICAgaWYgKHBvc3RDb2RlKSB7XG4gICAgICBpZiAoRmlsdGVyRXhwcmVzc2lvbikge1xuICAgICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcgQU5EICc7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnbGluZSA4OCcpO1xuICAgICAgfVxuICAgICAgY29uc29sZS5pbmZvKCdsaW5lIDkwJyk7XG4gICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcjUG9zdENvZGUgPSA6cG9zdENvZGUnO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOnBvc3RDb2RlJ10gPSBwb3N0Q29kZTtcbiAgICB9XG5cbiAgICBwYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBGaWx0ZXJFeHByZXNzaW9uLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjU3VidXJiJzogJ1N1YnVyYicsXG4gICAgICAgICcjUG9zdENvZGUnOiAnUG9zdENvZGUnLFxuICAgICAgfSxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgfTtcbiAgICBjb25zb2xlLmluZm8oJ2xpbmUgMTA0Jyk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBkb2N1bWVudENsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIGNvbnNvbGUuaW5mbygnbGluZSAxMDknKTtcbiAgICBjb25zdCBpdGVtcyA9IGRhdGEuSXRlbXM7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShpdGVtcyksXG4gICAgfTtcbiAgICBjb25zb2xlLmluZm8oYGJvZHk6ICR7cmVzcG9uc2UuYm9keX1gKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmluZm8oZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGJvZHk6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InLFxuICAgIH07XG4gIH1cbn07XG5cblxuXG5cblxuIl19