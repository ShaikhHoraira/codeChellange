"use strict";
// import * as AWS from 'aws-sdk';
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const tableName = process.env.TODO_TABLE_NAME;
const documentClient = new AWS.DynamoDB.DocumentClient({
    region: process.env.region,
});
const handler = async (event, _context) => {
    console.info(event);
    const queryParams = event.queryStringParameters;
    const suburb = queryParams.suburb;
    const postCode = queryParams.postcode;
    let params = {
        TableName: tableName,
    };
    if (suburb || postCode) {
        let KeyConditionExpression = '';
        let ExpressionAttributeValues = {};
        if (suburb) {
            KeyConditionExpression += '#Suburb = :Suburb';
            ExpressionAttributeValues[':Suburb'] = suburb;
        }
        if (postCode) {
            if (KeyConditionExpression) {
                KeyConditionExpression += ' AND ';
            }
            KeyConditionExpression += '#PostCode = :PostCode';
            ExpressionAttributeValues[':PostCode'] = postCode;
        }
        params = {
            ...params,
            KeyConditionExpression,
            ExpressionAttributeNames: {
                '#Suburb': 'Suburb',
                '#PostCode': 'PostCode',
            },
            ExpressionAttributeValues,
        };
    }
    try {
        const data = await documentClient.query(params).promise();
        const items = data.Items;
        const response = {
            statusCode: 200,
            body: JSON.stringify(items),
        };
        console.info(`body: ${response.body}`);
        return response;
    }
    catch (e) {
        console.info(e);
        return {
            statusCode: 500,
            body: e === 500 ? 'Invalid Request Parameters' : e,
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldEhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGtDQUFrQzs7O0FBeURsQywrQkFBK0I7QUFFL0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7QUFDOUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO0NBQzNCLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFZLEtBQUssRUFBRSxLQUFVLEVBQUUsUUFBYyxFQUFFLEVBQUU7SUFDbkUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFDaEQsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO0lBRXRDLElBQUksTUFBTSxHQUEyQztRQUNuRCxTQUFTLEVBQUUsU0FBVTtLQUN0QixDQUFDO0lBRUYsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1FBQ3RCLElBQUksc0JBQXNCLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLElBQUkseUJBQXlCLEdBQTRELEVBQUUsQ0FBQztRQUU1RixJQUFJLE1BQU0sRUFBRTtZQUNWLHNCQUFzQixJQUFJLG1CQUFtQixDQUFDO1lBQzlDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUMvQztRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxzQkFBc0IsRUFBRTtnQkFDMUIsc0JBQXNCLElBQUksT0FBTyxDQUFDO2FBQ25DO1lBQ0Qsc0JBQXNCLElBQUksdUJBQXVCLENBQUM7WUFDbEQseUJBQXlCLENBQUMsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ25EO1FBRUQsTUFBTSxHQUFHO1lBQ1AsR0FBRyxNQUFNO1lBQ1Qsc0JBQXNCO1lBQ3RCLHdCQUF3QixFQUFFO2dCQUN4QixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsV0FBVyxFQUFFLFVBQVU7YUFDeEI7WUFDRCx5QkFBeUI7U0FDMUIsQ0FBQztLQUNIO0lBRUQsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sUUFBUSxHQUFHO1lBQ2YsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDNUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkQsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDO0FBdkRXLFFBQUEsT0FBTyxXQXVEbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbi8vIGNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRPRE9fVEFCTEVfTkFNRTtcbi8vIGNvbnN0IGRvY3VtZW50Q2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCh7XG4vLyAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYucmVnaW9uLFxuLy8gfSk7XG5cbi8vIGV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50IDogYW55LCBfY29udGV4dDogYW55KSA9PiB7XG4vLyAgIGNvbnNvbGUuaW5mbyhldmVudCk7XG5cbi8vICAgY29uc3QgcXVlcnlQYXJhbXMgPSBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnM7XG4vLyAgIGNvbnN0IHN1YnVyYiA9IHF1ZXJ5UGFyYW1zLnN1YnVyYjtcbi8vICAgY29uc3QgcG9zdGNvZGUgPSBxdWVyeVBhcmFtcy5wb3N0Y29kZTtcblxuLy8gICBjb25zdCBwYXJhbXM6IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudC5TY2FuSW5wdXQgPSB7XG4vLyAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUhLFxuLy8gICB9O1xuXG4vLyAgIGlmIChzdWJ1cmIpIHtcbi8vICAgICBwYXJhbXMuRmlsdGVyRXhwcmVzc2lvbiA9ICcjc3VidXJiID0gOnN1YnVyYic7XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyA9IHtcbi8vICAgICAgICcjc3VidXJiJzogJ1N1YnVyYicsXG4vLyAgICAgfTtcbi8vICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyA9IHtcbi8vICAgICAgICc6c3VidXJiJzogc3VidXJiLFxuLy8gICAgIH07XG4vLyAgIH1cblxuLy8gICBpZiAocG9zdGNvZGUpIHtcbi8vICAgICBwYXJhbXMuRmlsdGVyRXhwcmVzc2lvbiA9ICcjcG9zdENvZGUgPSA6cG9zdENvZGUnO1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlTmFtZXMgPSB7XG4vLyAgICAgICAnI3Bvc3RDb2RlJzogJ1Bvc3RDb2RlJyxcbi8vICAgICB9O1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0ge1xuLy8gICAgICAgJzpwb3N0Q29kZSc6IHBvc3Rjb2RlLFxuLy8gICAgIH07XG4vLyAgIH1cblxuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBkb2N1bWVudENsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuLy8gICAgIGNvbnN0IGl0ZW1zID0gZGF0YS5JdGVtcztcbi8vICAgICBjb25zdCByZXNwb25zZSA9IHtcbi8vICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbi8vICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGl0ZW1zKSxcbi8vICAgICB9O1xuLy8gICAgIGNvbnNvbGUuaW5mbyhgYm9keTogJHtyZXNwb25zZS5ib2R5fWApO1xuLy8gICAgIHJldHVybiByZXNwb25zZTtcbi8vICAgfSBjYXRjaCAoZSkge1xuLy8gICAgIHJldHVybiB7XG4vLyAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4vLyAgICAgICBib2R5OiBlID09PSA1MDAgPyAnSW52YWxpZCBSZXF1ZXN0IFBhcmFtZXRlcnMnIDogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyxcbi8vICAgICB9O1xuLy8gICB9XG4vLyB9O1xuXG5cbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UT0RPX1RBQkxFX05BTUU7XG5jb25zdCBkb2N1bWVudENsaWVudCA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe1xuICByZWdpb246IHByb2Nlc3MuZW52LnJlZ2lvbixcbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogSGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBfY29udGV4dCA6IGFueSkgPT4ge1xuICBjb25zb2xlLmluZm8oZXZlbnQpO1xuXG4gIGNvbnN0IHF1ZXJ5UGFyYW1zID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzO1xuICBjb25zdCBzdWJ1cmIgPSBxdWVyeVBhcmFtcy5zdWJ1cmI7XG4gIGNvbnN0IHBvc3RDb2RlID0gcXVlcnlQYXJhbXMucG9zdGNvZGU7XG5cbiAgbGV0IHBhcmFtczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LlF1ZXJ5SW5wdXQgPSB7XG4gICAgVGFibGVOYW1lOiB0YWJsZU5hbWUhLFxuICB9O1xuXG4gIGlmIChzdWJ1cmIgfHwgcG9zdENvZGUpIHtcbiAgICBsZXQgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbiA9ICcnO1xuICAgIGxldCBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwID0ge307XG5cbiAgICBpZiAoc3VidXJiKSB7XG4gICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uICs9ICcjU3VidXJiID0gOlN1YnVyYic7XG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzWyc6U3VidXJiJ10gPSBzdWJ1cmI7XG4gICAgfVxuXG4gICAgaWYgKHBvc3RDb2RlKSB7XG4gICAgICBpZiAoS2V5Q29uZGl0aW9uRXhwcmVzc2lvbikge1xuICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uICs9ICcgQU5EICc7XG4gICAgICB9XG4gICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uICs9ICcjUG9zdENvZGUgPSA6UG9zdENvZGUnO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOlBvc3RDb2RlJ10gPSBwb3N0Q29kZTtcbiAgICB9XG5cbiAgICBwYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjU3VidXJiJzogJ1N1YnVyYicsXG4gICAgICAgICcjUG9zdENvZGUnOiAnUG9zdENvZGUnLFxuICAgICAgfSxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnF1ZXJ5KHBhcmFtcykucHJvbWlzZSgpO1xuICAgIGNvbnN0IGl0ZW1zID0gZGF0YS5JdGVtcztcbiAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGl0ZW1zKSxcbiAgICB9O1xuICAgIGNvbnNvbGUuaW5mbyhgYm9keTogJHtyZXNwb25zZS5ib2R5fWApO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuaW5mbyhlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgYm9keTogZSA9PT0gNTAwID8gJ0ludmFsaWQgUmVxdWVzdCBQYXJhbWV0ZXJzJyA6IGUsXG4gICAgfTtcbiAgfVxufTtcblxuXG5cbiJdfQ==