"use strict";
// import * as AWS from 'aws-sdk';
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const tableName = process.env.TODO_TABLE_NAME;
const documentClient = new AWS.DynamoDB.DocumentClient({
    region: process.env.region,
});
const handler = async (event, _context) => {
    console.info(event);
    const queryParams = event.queryStringParameters;
    const suburb = queryParams.Suburb;
    const postCode = queryParams.PostCode;
    let params = {
        TableName: tableName,
    };
    if (suburb || postCode) {
        let FilterExpression = '';
        let ExpressionAttributeValues = {};
        if (suburb) {
            FilterExpression += '#suburb = :suburb';
            ExpressionAttributeValues[':suburb'] = suburb;
        }
        if (postCode) {
            if (FilterExpression) {
                FilterExpression += ' OR ';
            }
            FilterExpression += '#postCode = :postCode';
            ExpressionAttributeValues[':postCode'] = postCode;
        }
        params = {
            ...params,
            FilterExpression,
            ExpressionAttributeNames: {
                '#suburb': 'Suburb',
                '#postCode': 'PostCode',
            },
            ExpressionAttributeValues,
        };
    }
    try {
        const data = await documentClient.scan(params).promise();
        const items = data.Items;
        const response = {
            statusCode: 200,
            body: JSON.stringify(items),
        };
        console.info(`body: ${response.body}`);
        return response;
    }
    catch (e) {
        console.info(e);
        return {
            statusCode: 500,
            body: e === 500 ? 'Invalid Request Parameters' : e,
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldEhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGtDQUFrQzs7O0FBeURsQywrQkFBK0I7QUFFL0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7QUFDOUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO0NBQzNCLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFZLEtBQUssRUFBRSxLQUFVLEVBQUUsUUFBYyxFQUFFLEVBQUU7SUFDbkUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFDaEQsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO0lBRXRDLElBQUksTUFBTSxHQUEwQztRQUNsRCxTQUFTLEVBQUUsU0FBVTtLQUN0QixDQUFDO0lBRUYsSUFBSSxNQUFNLElBQUksUUFBUSxFQUFFO1FBQ3RCLElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUkseUJBQXlCLEdBQTRELEVBQUUsQ0FBQztRQUU1RixJQUFJLE1BQU0sRUFBRTtZQUNWLGdCQUFnQixJQUFJLG1CQUFtQixDQUFDO1lBQ3hDLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztTQUMvQztRQUVELElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEIsZ0JBQWdCLElBQUksTUFBTSxDQUFDO2FBQzVCO1lBQ0QsZ0JBQWdCLElBQUksdUJBQXVCLENBQUM7WUFDNUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ25EO1FBRUQsTUFBTSxHQUFHO1lBQ1AsR0FBRyxNQUFNO1lBQ1QsZ0JBQWdCO1lBQ2hCLHdCQUF3QixFQUFFO2dCQUN4QixTQUFTLEVBQUUsUUFBUTtnQkFDbkIsV0FBVyxFQUFFLFVBQVU7YUFDeEI7WUFDRCx5QkFBeUI7U0FDMUIsQ0FBQztLQUNIO0lBRUQsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sUUFBUSxHQUFHO1lBQ2YsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDNUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN2QyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNmLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUM7QUF2RFcsUUFBQSxPQUFPLFdBdURsQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAqIGFzIEFXUyBmcm9tICdhd3Mtc2RrJztcblxuLy8gY29uc3QgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVE9ET19UQUJMRV9OQU1FO1xuLy8gY29uc3QgZG9jdW1lbnRDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KHtcbi8vICAgcmVnaW9uOiBwcm9jZXNzLmVudi5yZWdpb24sXG4vLyB9KTtcblxuLy8gZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQgOiBhbnksIF9jb250ZXh0OiBhbnkpID0+IHtcbi8vICAgY29uc29sZS5pbmZvKGV2ZW50KTtcblxuLy8gICBjb25zdCBxdWVyeVBhcmFtcyA9IGV2ZW50LnF1ZXJ5U3RyaW5nUGFyYW1ldGVycztcbi8vICAgY29uc3Qgc3VidXJiID0gcXVlcnlQYXJhbXMuc3VidXJiO1xuLy8gICBjb25zdCBwb3N0Y29kZSA9IHF1ZXJ5UGFyYW1zLnBvc3Rjb2RlO1xuXG4vLyAgIGNvbnN0IHBhcmFtczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LlNjYW5JbnB1dCA9IHtcbi8vICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSEsXG4vLyAgIH07XG5cbi8vICAgaWYgKHN1YnVyYikge1xuLy8gICAgIHBhcmFtcy5GaWx0ZXJFeHByZXNzaW9uID0gJyNzdWJ1cmIgPSA6c3VidXJiJztcbi8vICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzID0ge1xuLy8gICAgICAgJyNzdWJ1cmInOiAnU3VidXJiJyxcbi8vICAgICB9O1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0ge1xuLy8gICAgICAgJzpzdWJ1cmInOiBzdWJ1cmIsXG4vLyAgICAgfTtcbi8vICAgfVxuXG4vLyAgIGlmIChwb3N0Y29kZSkge1xuLy8gICAgIHBhcmFtcy5GaWx0ZXJFeHByZXNzaW9uID0gJyNwb3N0Q29kZSA9IDpwb3N0Q29kZSc7XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyA9IHtcbi8vICAgICAgICcjcG9zdENvZGUnOiAnUG9zdENvZGUnLFxuLy8gICAgIH07XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMgPSB7XG4vLyAgICAgICAnOnBvc3RDb2RlJzogcG9zdGNvZGUsXG4vLyAgICAgfTtcbi8vICAgfVxuXG4vLyAgIHRyeSB7XG4vLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4vLyAgICAgY29uc3QgaXRlbXMgPSBkYXRhLkl0ZW1zO1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuLy8gICAgICAgc3RhdHVzQ29kZTogMjAwLFxuLy8gICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaXRlbXMpLFxuLy8gICAgIH07XG4vLyAgICAgY29uc29sZS5pbmZvKGBib2R5OiAke3Jlc3BvbnNlLmJvZHl9YCk7XG4vLyAgICAgcmV0dXJuIHJlc3BvbnNlO1xuLy8gICB9IGNhdGNoIChlKSB7XG4vLyAgICAgcmV0dXJuIHtcbi8vICAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbi8vICAgICAgIGJvZHk6IGUgPT09IDUwMCA/ICdJbnZhbGlkIFJlcXVlc3QgUGFyYW1ldGVycycgOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcnLFxuLy8gICAgIH07XG4vLyAgIH1cbi8vIH07XG5cblxuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhXCI7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRPRE9fVEFCTEVfTkFNRTtcbmNvbnN0IGRvY3VtZW50Q2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCh7XG4gIHJlZ2lvbjogcHJvY2Vzcy5lbnYucmVnaW9uLFxufSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBIYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIF9jb250ZXh0IDogYW55KSA9PiB7XG4gIGNvbnNvbGUuaW5mbyhldmVudCk7XG5cbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnM7XG4gIGNvbnN0IHN1YnVyYiA9IHF1ZXJ5UGFyYW1zLlN1YnVyYjtcbiAgY29uc3QgcG9zdENvZGUgPSBxdWVyeVBhcmFtcy5Qb3N0Q29kZTtcblxuICBsZXQgcGFyYW1zOiBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQuU2NhbklucHV0ID0ge1xuICAgIFRhYmxlTmFtZTogdGFibGVOYW1lISxcbiAgfTtcblxuICBpZiAoc3VidXJiIHx8IHBvc3RDb2RlKSB7XG4gICAgbGV0IEZpbHRlckV4cHJlc3Npb24gPSAnJztcbiAgICBsZXQgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50LkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZU1hcCA9IHt9O1xuXG4gICAgaWYgKHN1YnVyYikge1xuICAgICAgRmlsdGVyRXhwcmVzc2lvbiArPSAnI3N1YnVyYiA9IDpzdWJ1cmInO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOnN1YnVyYiddID0gc3VidXJiO1xuICAgIH1cblxuICAgIGlmIChwb3N0Q29kZSkge1xuICAgICAgaWYgKEZpbHRlckV4cHJlc3Npb24pIHtcbiAgICAgICAgRmlsdGVyRXhwcmVzc2lvbiArPSAnIE9SICc7XG4gICAgICB9XG4gICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcjcG9zdENvZGUgPSA6cG9zdENvZGUnO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOnBvc3RDb2RlJ10gPSBwb3N0Q29kZTtcbiAgICB9XG5cbiAgICBwYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBGaWx0ZXJFeHByZXNzaW9uLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjc3VidXJiJzogJ1N1YnVyYicsXG4gICAgICAgICcjcG9zdENvZGUnOiAnUG9zdENvZGUnLFxuICAgICAgfSxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgY29uc3QgaXRlbXMgPSBkYXRhLkl0ZW1zO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaXRlbXMpLFxuICAgIH07XG4gICAgY29uc29sZS5pbmZvKGBib2R5OiAke3Jlc3BvbnNlLmJvZHl9YCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5pbmZvKGUpXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcbiAgICAgIGJvZHk6IGUgPT09IDUwMCA/ICdJbnZhbGlkIFJlcXVlc3QgUGFyYW1ldGVycycgOiBlLFxuICAgIH07XG4gIH1cbn07XG5cbiJdfQ==