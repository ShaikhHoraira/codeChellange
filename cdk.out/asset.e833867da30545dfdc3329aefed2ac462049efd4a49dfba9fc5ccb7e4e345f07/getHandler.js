"use strict";
// import * as AWS from 'aws-sdk';
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const AWS = require("aws-sdk");
const tableName = process.env.TODO_TABLE_NAME;
const documentClient = new AWS.DynamoDB.DocumentClient({
    region: process.env.region,
});
const handler = async (event, _context) => {
    console.info(event);
    const suburb = event.suburb;
    const postCode = event.postCode;
    let params = {
        TableName: tableName,
    };
    if (suburb || postCode) {
        let FilterExpression = '';
        let ExpressionAttributeValues = {};
        if (suburb) {
            FilterExpression += '#Suburb = :suburb';
            ExpressionAttributeValues[':suburb'] = suburb;
        }
        if (postCode) {
            if (FilterExpression) {
                FilterExpression += ' AND ';
            }
            FilterExpression += '#PostCode = :postCode';
            ExpressionAttributeValues[':postCode'] = postCode;
        }
        params = {
            ...params,
            FilterExpression,
            ExpressionAttributeNames: {
                '#Suburb': 'Suburb',
                '#PostCode': 'PostCode',
            },
            ExpressionAttributeValues,
        };
    }
    try {
        const data = await documentClient.scan(params).promise();
        const items = data.Items;
        const response = {
            statusCode: 200,
            body: JSON.stringify(items),
        };
        console.info(`body: ${response.body}`);
        return response;
    }
    catch (e) {
        console.info(e);
        return {
            statusCode: 500,
            body: 'Internal Server Error',
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0SGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldEhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGtDQUFrQzs7O0FBeURsQywrQkFBK0I7QUFFL0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7QUFDOUMsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztJQUNyRCxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO0NBQzNCLENBQUMsQ0FBQztBQUVJLE1BQU0sT0FBTyxHQUFZLEtBQUssRUFBRSxLQUFVLEVBQUUsUUFBYSxFQUFFLEVBQUU7SUFDbEUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVwQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzVCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFFaEMsSUFBSSxNQUFNLEdBQTBDO1FBQ2xELFNBQVMsRUFBRSxTQUFVO0tBQ3RCLENBQUM7SUFFRixJQUFJLE1BQU0sSUFBSSxRQUFRLEVBQUU7UUFDdEIsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSx5QkFBeUIsR0FBNEQsRUFBRSxDQUFDO1FBRTVGLElBQUksTUFBTSxFQUFFO1lBQ1YsZ0JBQWdCLElBQUksbUJBQW1CLENBQUM7WUFDeEMseUJBQXlCLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQy9DO1FBRUQsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLGdCQUFnQixFQUFFO2dCQUNwQixnQkFBZ0IsSUFBSSxPQUFPLENBQUM7YUFDN0I7WUFDRCxnQkFBZ0IsSUFBSSx1QkFBdUIsQ0FBQztZQUM1Qyx5QkFBeUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDbkQ7UUFFRCxNQUFNLEdBQUc7WUFDUCxHQUFHLE1BQU07WUFDVCxnQkFBZ0I7WUFDaEIsd0JBQXdCLEVBQUU7Z0JBQ3hCLFNBQVMsRUFBRSxRQUFRO2dCQUNuQixXQUFXLEVBQUUsVUFBVTthQUN4QjtZQUNELHlCQUF5QjtTQUMxQixDQUFDO0tBQ0g7SUFFRCxJQUFJO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUc7WUFDZixVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUM1QixDQUFDO1FBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSx1QkFBdUI7U0FDOUIsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDO0FBdERXLFFBQUEsT0FBTyxXQXNEbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbi8vIGNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRPRE9fVEFCTEVfTkFNRTtcbi8vIGNvbnN0IGRvY3VtZW50Q2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCh7XG4vLyAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYucmVnaW9uLFxuLy8gfSk7XG5cbi8vIGV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50IDogYW55LCBfY29udGV4dDogYW55KSA9PiB7XG4vLyAgIGNvbnNvbGUuaW5mbyhldmVudCk7XG5cbi8vICAgY29uc3QgcXVlcnlQYXJhbXMgPSBldmVudC5xdWVyeVN0cmluZ1BhcmFtZXRlcnM7XG4vLyAgIGNvbnN0IHN1YnVyYiA9IHF1ZXJ5UGFyYW1zLnN1YnVyYjtcbi8vICAgY29uc3QgcG9zdGNvZGUgPSBxdWVyeVBhcmFtcy5wb3N0Y29kZTtcblxuLy8gICBjb25zdCBwYXJhbXM6IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudC5TY2FuSW5wdXQgPSB7XG4vLyAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUhLFxuLy8gICB9O1xuXG4vLyAgIGlmIChzdWJ1cmIpIHtcbi8vICAgICBwYXJhbXMuRmlsdGVyRXhwcmVzc2lvbiA9ICcjc3VidXJiID0gOnN1YnVyYic7XG4vLyAgICAgcGFyYW1zLkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyA9IHtcbi8vICAgICAgICcjc3VidXJiJzogJ1N1YnVyYicsXG4vLyAgICAgfTtcbi8vICAgICBwYXJhbXMuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyA9IHtcbi8vICAgICAgICc6c3VidXJiJzogc3VidXJiLFxuLy8gICAgIH07XG4vLyAgIH1cblxuLy8gICBpZiAocG9zdGNvZGUpIHtcbi8vICAgICBwYXJhbXMuRmlsdGVyRXhwcmVzc2lvbiA9ICcjcG9zdENvZGUgPSA6cG9zdENvZGUnO1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlTmFtZXMgPSB7XG4vLyAgICAgICAnI3Bvc3RDb2RlJzogJ1Bvc3RDb2RlJyxcbi8vICAgICB9O1xuLy8gICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0ge1xuLy8gICAgICAgJzpwb3N0Q29kZSc6IHBvc3Rjb2RlLFxuLy8gICAgIH07XG4vLyAgIH1cblxuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBkb2N1bWVudENsaWVudC5zY2FuKHBhcmFtcykucHJvbWlzZSgpO1xuLy8gICAgIGNvbnN0IGl0ZW1zID0gZGF0YS5JdGVtcztcbi8vICAgICBjb25zdCByZXNwb25zZSA9IHtcbi8vICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbi8vICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGl0ZW1zKSxcbi8vICAgICB9O1xuLy8gICAgIGNvbnNvbGUuaW5mbyhgYm9keTogJHtyZXNwb25zZS5ib2R5fWApO1xuLy8gICAgIHJldHVybiByZXNwb25zZTtcbi8vICAgfSBjYXRjaCAoZSkge1xuLy8gICAgIHJldHVybiB7XG4vLyAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4vLyAgICAgICBib2R5OiBlID09PSA1MDAgPyAnSW52YWxpZCBSZXF1ZXN0IFBhcmFtZXRlcnMnIDogJ1NvbWV0aGluZyB3ZW50IHdyb25nJyxcbi8vICAgICB9O1xuLy8gICB9XG4vLyB9O1xuXG5cbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYVwiO1xuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UT0RPX1RBQkxFX05BTUU7XG5jb25zdCBkb2N1bWVudENsaWVudCA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe1xuICByZWdpb246IHByb2Nlc3MuZW52LnJlZ2lvbixcbn0pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogSGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBfY29udGV4dDogYW55KSA9PiB7XG4gIGNvbnNvbGUuaW5mbyhldmVudCk7XG5cbiAgY29uc3Qgc3VidXJiID0gZXZlbnQuc3VidXJiO1xuICBjb25zdCBwb3N0Q29kZSA9IGV2ZW50LnBvc3RDb2RlO1xuXG4gIGxldCBwYXJhbXM6IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudC5TY2FuSW5wdXQgPSB7XG4gICAgVGFibGVOYW1lOiB0YWJsZU5hbWUhLFxuICB9O1xuXG4gIGlmIChzdWJ1cmIgfHwgcG9zdENvZGUpIHtcbiAgICBsZXQgRmlsdGVyRXhwcmVzc2lvbiA9ICcnO1xuICAgIGxldCBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQuRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlTWFwID0ge307XG5cbiAgICBpZiAoc3VidXJiKSB7XG4gICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcjU3VidXJiID0gOnN1YnVyYic7XG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzWyc6c3VidXJiJ10gPSBzdWJ1cmI7XG4gICAgfVxuXG4gICAgaWYgKHBvc3RDb2RlKSB7XG4gICAgICBpZiAoRmlsdGVyRXhwcmVzc2lvbikge1xuICAgICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcgQU5EICc7XG4gICAgICB9XG4gICAgICBGaWx0ZXJFeHByZXNzaW9uICs9ICcjUG9zdENvZGUgPSA6cG9zdENvZGUnO1xuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOnBvc3RDb2RlJ10gPSBwb3N0Q29kZTtcbiAgICB9XG5cbiAgICBwYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBGaWx0ZXJFeHByZXNzaW9uLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjU3VidXJiJzogJ1N1YnVyYicsXG4gICAgICAgICcjUG9zdENvZGUnOiAnUG9zdENvZGUnLFxuICAgICAgfSxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGRvY3VtZW50Q2xpZW50LnNjYW4ocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgY29uc3QgaXRlbXMgPSBkYXRhLkl0ZW1zO1xuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoaXRlbXMpLFxuICAgIH07XG4gICAgY29uc29sZS5pbmZvKGBib2R5OiAke3Jlc3BvbnNlLmJvZHl9YCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5pbmZvKGUpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICBib2R5OiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyxcbiAgICB9O1xuICB9XG59O1xuXG5cblxuXG5cbiJdfQ==